<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>よもぎさんのへや</title><link>http://yomogitaro.github.io/article/</link><description>Recent content on よもぎさんのへや</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 25 Mar 2017 17:21:09 +0900</lastBuildDate><atom:link href="http://yomogitaro.github.io/article/index.xml" rel="self" type="application/rss+xml"/><item><title>redmine のワークフローでいろいろやる</title><link>http://yomogitaro.github.io/article/post/2017-03-25_172109_redmine_workflow/</link><pubDate>Sat, 25 Mar 2017 17:21:09 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/2017-03-25_172109_redmine_workflow/</guid><description>redmine のワークフロー設定でできることをまとめておきたい。 ワークフローを作りたい人が Administrator 権限を持っていないことがあると思うので、 どこの操作までを普通のユーザーができるのかまとめておく。
ワークフローを作るときに必要な操作と権限 先にどういうワークフローにしたいのかを決めておいたほうが設定しやすそう。 状態遷移図までかけるとやりやすい。 状態を issue ステータスで定義し、遷移を issue ワークフローステータス遷移と、ロールで制御すれば良さそう。
ワークフローのイメージができたら、ロール、トラッカー、ステータス、フローを洗い出して、 Adminstrator でしか追加できない項目をお願いすれば良い。
Administrator 以外でもできる操作を簡単に調べてみたら、 以下のような感じだった。
操作 Administrator 以外でもできるか？ ユーザーを作る x プロジェクトを作る o (Create Project 権限があれば) ロールを追加する x プロジェクトにユーザーを追加 o プロジェクトでのユーザーのロールを設定 o issue トラッカーの追加 x issue ステータスの追加 x issue ワークフローステータス遷移の設定 x issue ワークフローステータスごとのパラメータ操作権限の設定 x 実際にやってみる 実際に何かのフローを考えてみたい。 許可をもらって作業をする場合のワークフローを試しに考えてみた。 作業をする前に責任者の許可をもらうこと、責任者の許可をもらう前に別の開発者に作業内容をレビューしてもらうのがルールとしてフローを設定してみる。
フローを列挙する 実際にどういうフローが考えられるか書いてみた。 状態遷移図書くのは面倒だったので適当に列挙した。
基本的なフロー None &amp;mdash;(開発者)&amp;mdash;&amp;gt; 新規 &amp;mdash;(開発者)&amp;mdash;&amp;gt; レビュー待ち &amp;mdash;(起案者以外の開発者)&amp;mdash;&amp;gt; 作業承認待ち &amp;mdash;(管理者)&amp;mdash;&amp;gt; 作業待ち &amp;mdash;(開発者)&amp;mdash;&amp;gt; 作業完了確認待ち &amp;mdash;(管理者)&amp;mdash;&amp;gt; 終了 レビューで指摘があって、再レビュー レビュー待ち &amp;mdash;(起案者以外の開発者)&amp;mdash;&amp;gt; レビューフィードバック &amp;mdash;(開発者)&amp;mdash;&amp;gt; レビュー待ち 作業承認で質問があって再レビュー 作業承認待ち &amp;mdash;(管理者)&amp;mdash;&amp;gt; 作業承認フィードバック &amp;mdash;(開発者)&amp;mdash;&amp;gt; 作業承認待ち 作業承認の質問で手順を変えて再レビュー 作業承認フィードバック &amp;mdash;(開発者)&amp;mdash;&amp;gt; レビュー待ち 起案者、管理者のみいつでも却下できる すべて &amp;mdash;(起案者の開発者)&amp;mdash;&amp;gt; 却下 すべて &amp;mdash;(管理者)&amp;mdash;&amp;gt; 却下 ステータスごとに設定したい制約を列挙する</description></item><item><title>IPAM DCIM ツールの netbox を試してみる</title><link>http://yomogitaro.github.io/article/post/2017-03-19_195229/</link><pubDate>Sun, 19 Mar 2017 19:52:30 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/2017-03-19_195229/</guid><description>ちょっと前にnetboxというツールが良いと教えてもらったので試してみる。自分がためしたバージョンは v1.9.2。 netbox 自体は、 Django で書かれた Web アプリケーション。 go-netbox という golang で書かれた API クライアントもある。
netbox のリポジトリに docker-compose.yml ファイルがあるのでこれを使ってたてていろいろ netbox と go-netbox を触ってみた。 http://netbox.readthedocs.io/en/stable/installation/docker/
Web UI から一通りつかってみる ログインするとダッシュボード画面が出てくる。 地域を管理する機能、DCIMとしての機能、IPAMとしての機能、エンドポイント間のリンクを管理する機能、パスワードなどの機密情報を管理する機能で分かれている。 DCIM は使ったことがないので何ができると良いのかはよくわかっていない。 機器の配置を決めてラック図を作ったり、 製造元やシリアルナンバーなどの機器の情報を管理できるみたいだった。
IPAM としては、 VLAN やサブネット、IP が管理できた。 Tenant や Site と紐付けることができたるので、目的の情報に到達しやすそう。 Site は親子関係をつくって階層分けできたのも良かった。 IP や VLAN などの登録は、 csv から一括登録するなどの方法が用意されていた。
管理者画面の Extra というところで、 Custom Field の追加や、 Export Template の追加は試せた。 Export Template で Custom Field を指定できなかったりしたけど一通り動いた。 外部からグラフを表示する機能や、トポロジマップの機能もあるようだった。
API について /api/docs/ などを見に行くと Swagger UI で API の一覧が見られる。 django-rest-swagger で Swagger のドキュメントを生成しているみたいだった。 基本的に GET の API しか用意されていないみたいだった。 IPAM 系は GET の API しか存在しなかった。</description></item><item><title>PC の設定で覚えておきたいこと</title><link>http://yomogitaro.github.io/article/post/2017-03-19_191725/</link><pubDate>Sun, 19 Mar 2017 19:17:27 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/2017-03-19_191725/</guid><description>PC を買ったのでやったことで覚えておきたいことを書く。
HiDPI 対策 lavie HZ は HiDPI なので対策をする。
Xfce のフォントの設定を変更 ここを参考にして変えた。 1.5倍くらいが良かったので144にした。 設定は ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml にかかれていた。
firefox の設定を変更 ここを参考にして変えた。
タッチパッド関係 キータイプ中にタッチパッドによく触れてしまうので、何かしら対策する。
タイプ中にタッチパッドを無効にする設定をした。 Mouse and Touchpad メニューで、タイピング中のタッチパッドを無効にするオプションがあったので有効にした。 0.3 秒に設定した。 設定は /.config/xfce4/xfconf/xfce-perchannel-xml/pointers.xml にかかれていた。
タッチパッドを無効にできるようにする それでも気になる時もあるので、 ここを参考に設定できるようにした。 右 Ctrl で無効/有効にできるようにした。</description></item><item><title>evm と Emacs 25.1 とモジュール</title><link>http://yomogitaro.github.io/article/post/2016-10-09_112745/</link><pubDate>Sun, 09 Oct 2016 11:27:46 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/2016-10-09_112745/</guid><description>Emacs 25.1 から elisp 以外の言語で書かれたモジュールを読み込めるようになったらしい。
Emacs can now load shared/dynamic libraries (modules). A dynamic Emacs module is a shared library that provides additional functionality for use in Emacs Lisp programs, just like a package written in Emacs Lisp would. 試してみる、ついでに evm を試したりする。
--with-module がないとモジュールが動かないところではまったりした。
evm で Emacs 25.1 を試す ひとつの環境に複数のバージョンの Emacs を管理できる evm というツールがあるらしい。 いきなり 25.1 にするのは怖いので evm を入れてみる。
https://github.com/rejeep/evm
readme の通り入れてみた。
$ curl -fsSkL https://raw.github.com/rejeep/evm/master/go | bash $ export PATH=&amp;#34;$HOME/.</description></item><item><title>elasticsearch 5.0.0-alpha4 + IPv6 + Packetbeats で遊びたい</title><link>http://yomogitaro.github.io/article/post/2016-07-10_110330/</link><pubDate>Sun, 10 Jul 2016 11:03:33 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/2016-07-10_110330/</guid><description>elasticsearch 5.0.0-alpha4 をみると datatype に IPv6 を含む IP 型ができている https://www.elastic.co/guide/en/elasticsearch/reference/master/ip.html
An ip field can index/store either IPv4 or IPv6 addresses. 試してみたい。 IPv6 もよく知らないので、ちょっと触ってみたい。せっかくなので Packetbeats も試してみたい。
やってみたら、 IPv6 を使うときは ip 型の stored を有効にしたほうが良さそうということがわかった。
Elasticsearch + kibana とりあえず環境をつくる。
% docker pull elasticsearch:5.0.0-alpha4 % docker run -d --name es2 elasticsearch:5.0.0-alpha4 メモリ確保できないといわれた
{&amp;#34;log&amp;#34;:&amp;#34;Exception in thread \&amp;#34;main\&amp;#34; java.lang.RuntimeException: bootstrap checks failed\n&amp;#34;,&amp;#34;stream&amp;#34;:&amp;#34;stderr&amp;#34;,&amp;#34;time&amp;#34;:&amp;#34;2016-07-10T06:56:11.405356902Z&amp;#34;} {&amp;#34;log&amp;#34;:&amp;#34;initial heap size [268435456] not equal to maximum heap size [2147483648]; this can cause resize pauses and prevents mlockall from locking the entire heap\n&amp;#34;,&amp;#34;stream&amp;#34;:&amp;#34;stderr&amp;#34;,&amp;#34;time&amp;#34;:&amp;#34;2016-07-10T06:56:11.</description></item><item><title>tmuxinator を使ってみた</title><link>http://yomogitaro.github.io/article/post/2016-07-03_164438/</link><pubDate>Sun, 03 Jul 2016 16:44:41 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/2016-07-03_164438/</guid><description>tmuxinator sudo gem install tmuxinator 環境変数 EDITOR SHELL と tmux のインストールが事前に必要
tmuxinator new tmux-window1 $HOME/.tmuxinator/ 以下にテンプレートファイルが作られる
# ~/.tmuxinator/tmux-window1.yml name: tmux-window1 root: ~/ # Optional tmux socket # socket_name: foo # Runs before everything. Use it to start daemons etc. # pre: sudo /etc/rc.d/mysqld start # Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions. # pre_window: rbenv shell 2.0.0-p247 # Pass command line options to tmux.</description></item><item><title>ひとに画面を見せて作業するときのあれこれ</title><link>http://yomogitaro.github.io/article/post/2016-05-21_105348/</link><pubDate>Sat, 21 May 2016 10:53:48 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/2016-05-21_105348/</guid><description>デモ動画を撮りたい スクリーンキャストソフト kazam というのを使う
キーキャストソフト screen key というのを使う。 apt だと 0.2 が入ってしまうので、 github から入れる。 0.9 を入れた。
コンフィグファイルは、 ~/.config/screencast.json。 注意する。
{ &amp;#34;font_color&amp;#34;: &amp;#34;white&amp;#34;, &amp;#34;persist&amp;#34;: true, &amp;#34;timeout&amp;#34;: 1.0, &amp;#34;multiline&amp;#34;: false, &amp;#34;geometry&amp;#34;: null, &amp;#34;bak_mode&amp;#34;: &amp;#34;baked&amp;#34;, &amp;#34;recent_thr&amp;#34;: 0.1, &amp;#34;font_size&amp;#34;: &amp;#34;small&amp;#34;, &amp;#34;ignore&amp;#34;: [], &amp;#34;mods_mode&amp;#34;: &amp;#34;normal&amp;#34;, &amp;#34;vis_shift&amp;#34;: false, &amp;#34;key_mode&amp;#34;: &amp;#34;composed&amp;#34;, &amp;#34;position&amp;#34;: &amp;#34;bottom&amp;#34;, &amp;#34;vis_space&amp;#34;: true, &amp;#34;bg_color&amp;#34;: &amp;#34;black&amp;#34;, &amp;#34;no_systray&amp;#34;: false, &amp;#34;screen&amp;#34;: 0, &amp;#34;compr_cnt&amp;#34;: 3, &amp;#34;font_desc&amp;#34;: &amp;#34;\u307f\u304b\u3061\u3083\u3093-P 0&amp;#34;, &amp;#34;mods_only&amp;#34;: false, &amp;#34;opacity&amp;#34;: 0.1 } こんな感じにした。
左シフトと右シフトを同時に押すと、表示、非表示を切り替えられるのが便利。</description></item><item><title>コミットしわすれている git リポジトリを通知する</title><link>http://yomogitaro.github.io/article/post/2016-05-15_092538/</link><pubDate>Sun, 15 May 2016 09:25:41 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/2016-05-15_092538/</guid><description>コミットしわすれている git リポジトリをきれいにした そもそもどんなリポジトリを作っていたかも謎になっていたので、探すところからやった。 cron で実行して通知するために、DBUS_SESSION_BUS_ADDRESSを探すところが苦労した。
#!/usr/bin/env zsh SESSION_MANAGER=xfce4-session SCRIPT_NAME=&amp;#34;yomogi-git-commit-reminder&amp;#34; NOTIFY_LIFE_TIME=5000 function LIST_GIT_DIRS() { find $HOME -xdev -type d -name .git 2&amp;gt;/dev/null } function create_remind_reports() { LINE=&amp;#39;&amp;#39; LIST_GIT_DIRS | while read git_dir do CHANGED_LINES=`git --git-dir=&amp;#34;$git_dir&amp;#34; --work-tree=&amp;#34;$git_dir/..&amp;#34; status --porcelain | wc -l` if [ $CHANGED_LINES -gt 0 ] then LINE=$LINE&amp;#34; `printf &amp;#34;%05d&amp;#34; $CHANGED_LINES` ${git_dir%/*} \n&amp;#34; fi done echo $LINE; } function output_report() { if [ &amp;#34;$VERBOSE&amp;#34; = &amp;#34;TRUE&amp;#34; ] then echo $REPORTS fi if [ &amp;#34;$NOTIFY&amp;#34; = &amp;#34;TRUE&amp;#34; ] then PID=$(pgrep xfce4-session) dbus=$(grep -z DBUS_SESSION_BUS_ADDRESS /proc/$PID/environ|cut -d= -f2-) export DBUS_SESSION_BUS_ADDRESS=$dbus /usr/bin/notify-send --urgency=low --expire-time=$NOTIFY_LIFE_TIME --category=git \ --icon=$HOME/var/image/Git-Icon-White.</description></item><item><title>Widows10 の bash を試してみる</title><link>http://yomogitaro.github.io/article/post/160409_windows10_bash/</link><pubDate>Sat, 09 Apr 2016 19:14:33 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/160409_windows10_bash/</guid><description>Windows10 の build 14316 から bash が利用できるようになるとの事だったので試してみる。 いままで Windows のマシンを使うときは、 Windows 上に VM 立てたり、 Windows 用の Emacs と mingw 組み合わせて使ってたりしたけど、 Ubuntu on Windows で代替できるか試したい。 Xming 使って、 ウインドウモードで起動できたら嬉しい。
セットアップ Windows 10 にする とりあえず、 Windows 8 を Windows 10 にする。 1時間くらいかかった。
開発者モードにする 設定から開発者モードにする。 再起動する。 Insider Preview ビルドを取ってくる Insider Preview の登録をする Insider のレベルをファーストにする ここが全然進まない。 そのた windows 10 に仮想デスクトップが追加されていてよかった。
Win + Ctrl + D: 新規デスクトップ Win + Ctrl + カーソル：デスクトップ移動 上下に配置したり、移動時のアニメーションを無効化したり、一番右端のデスクトップから、一番左端のデスクトップに移動できると嬉しいけど、設定が見つからなかった。</description></item><item><title>apt-get update できなくなった</title><link>http://yomogitaro.github.io/article/post/151115_ubuntu/</link><pubDate>Sun, 15 Nov 2015 01:35:35 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/151115_ubuntu/</guid><description>apt-get update したらなんかエラーが出てきた。
W: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/dists/vivid-updates/main/binary-amd64/Packages Hash Sum mismatch W: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/dists/vivid-updates/main/binary-i386/Packages Hash Sum mismatch E: Some index files failed to download. They have been ignored, or old ones used instead. パッケージの状態を保存したファイルを削除
sudo mv /var/lib/apt/lists /tmp/lists.back sudo apt-get autoclean sudo apt-get clean sudo apt-get update 治った</description></item><item><title>embulk で csv を elasticsearch に移したい</title><link>http://yomogitaro.github.io/article/post/embulk_css_to_es/</link><pubDate>Mon, 20 Jul 2015 22:53:57 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/embulk_css_to_es/</guid><description>やりたいこと csv のファイルの内容を elasticsearch に移行したい 試した方法 embulk を利用すればできそうなので試してみた。
テスト用 elasticsearch の準備　elasticsearch を入れる
% docker run -d --name es1 elasticsearch IP を確認して動いているか確認
% docker inspect --format &amp;#39;{{ .NetworkSettings.IPAddress }}&amp;#39; es1 % curl &amp;#39;http://172.17.0.4:9200/_stats&amp;#39; {&amp;#34;_shards&amp;#34;:{&amp;#34;total&amp;#34;:0,&amp;#34;successful&amp;#34;:0,&amp;#34;failed&amp;#34;:0},&amp;#34;_all&amp;#34;:{&amp;#34;primaries&amp;#34;:{},&amp;#34;total&amp;#34;:{}},&amp;#34;indices&amp;#34;:{}}% ドキュメントを UI から確認するために kibana も用意
% docker run --link es1:elasticsearch -d --name kibana01 kibana % docker inspect --format &amp;#39;{{ .NetworkSettings.IPAddress }}&amp;#39; kibana01 http://172.17.0.6:5601 動いているか見てみる embulk のインストール java が必要なので入れる
% sudo apt-get install openjdk-8-jdk ここに書いてあるとおりに入れてみる サンプルを動かしてみる
% embulk example .</description></item><item><title>ブログ始めるときに困ったこと</title><link>http://yomogitaro.github.io/article/post/blog_go/</link><pubDate>Mon, 20 Jul 2015 22:16:50 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/blog_go/</guid><description>どういうふうにブログを作ったか この blog は下記のものでできている。
hugo github pages github pages は下記の２通りの方法があるようだった。
username.github.io という名前のリポジトリを作る 任意のリポジトリに gh-pages というブランチを作る 後者を利用することにした。 master ブランチにブログのソースを置いて, ビルドした結果を公開ブランチにするほうが良さそうだと思った。
hugo の最上部のブランチを master, public ディレクトリを gh-pages にした。
主に下記のサイトを参考にした。
http://gohugo.io/overview/introduction/ https://help.github.coms/user-organization-and-project-pages/#project-pages 構築中に詰まったところ go インストール後パスを通したのに go がないと言われる go を実行したら下記のようなメッセージが出てきた。
$ go zsh: no such file or directory: {{go のパス}}/go 下記を見なおしたが問題が無かった。
PATH 設定 GOROOT 設定 GOPATH 設定 入れていた go のバイナリが間違っていたことがわかり、 入れなおしたらうまく動いた。 64bit が必要だが Linux 32-bit を入れてしまっていた。 恥ずかしいミスだった。
hugo テーマがうまく当たらない dddddhugo のテーマがうまく当たらなかった。 サイトのパスのトップに css や js がないとうまく動かなかった。 パスを設定できるようにして当たるようにした。</description></item><item><title>ブログはじめました</title><link>http://yomogitaro.github.io/article/post/first/</link><pubDate>Sun, 19 Jul 2015 17:59:50 +0900</pubDate><guid>http://yomogitaro.github.io/article/post/first/</guid><description>ブログはじめました!</description></item></channel></rss>